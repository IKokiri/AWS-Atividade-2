/*
 * Livraria Virtual
 *
 * Manipulação de livros e suas dependências 
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class LivroApiController : Controller
    { 
        /// <summary>
        /// Adiciona um novo livro
        /// </summary>
        
        /// <param name="body">dados do livro que será adicionado</param>
        /// <response code="405">Dados inválidos</response>
        [HttpPost]
        [Route("/IKokiri/Livrariav/v1/livros")]
        [ValidateModelState]
        [SwaggerOperation("AddLivro")]
        public virtual IActionResult AddLivro([FromBody]Livro body)
        { 
            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Remoção de um livro
        /// </summary>
        /// <remarks>Remove um livro</remarks>
        /// <param name="isbn">identificador do livro que será removido</param>
        /// <response code="400">Livro inválido</response>
        /// <response code="404">Livro não encontrado</response>
        [HttpDelete]
        [Route("/IKokiri/Livrariav/v1/livros/{isbn}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteLivro")]
        public virtual IActionResult DeleteLivro([FromRoute][Required]decimal? isbn)
        { 
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Busca livro por isbn
        /// </summary>
        /// <remarks>Retorna um unico livro</remarks>
        /// <param name="isbn">identificador do livro de retorno</param>
        /// <response code="200">seccess</response>
        /// <response code="400">ISBN inválido</response>
        /// <response code="404">Livro não encontrado</response>
        [HttpGet]
        [Route("/IKokiri/Livrariav/v1/livros/{isbn}")]
        [ValidateModelState]
        [SwaggerOperation("GetLivroByIsbn")]
        [SwaggerResponse(statusCode: 200, type: typeof(Livro), description: "seccess")]
        public virtual IActionResult GetLivroByIsbn([FromRoute][Required]long? isbn)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Livro));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            string exampleJson = null;
            exampleJson = "{\n  \"preco\" : 5.962133916683182377482808078639209270477294921875,\n  \"data\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"isbn\" : 0.80082819046101150206595775671303272247314453125,\n  \"genero\" : {\n    \"genero\" : \"genero\",\n    \"id\" : 1\n  },\n  \"titulo\" : \"titulo\",\n  \"autor\" : {\n    \"nome\" : \"nome\",\n    \"id\" : 6\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Livro>(exampleJson)
            : default(Livro);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Busca livros do armazenamento
        /// </summary>
        
        /// <response code="200">success</response>
        /// <response code="400">não encontrado</response>
        [HttpGet]
        [Route("/IKokiri/Livrariav/v1/livros")]
        [ValidateModelState]
        [SwaggerOperation("GetLivros")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Livro>), description: "success")]
        public virtual IActionResult GetLivros()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Livro>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            string exampleJson = null;
            exampleJson = "[ {\n  \"preco\" : 5.962133916683182377482808078639209270477294921875,\n  \"data\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"isbn\" : 0.80082819046101150206595775671303272247314453125,\n  \"genero\" : {\n    \"genero\" : \"genero\",\n    \"id\" : 1\n  },\n  \"titulo\" : \"titulo\",\n  \"autor\" : {\n    \"nome\" : \"nome\",\n    \"id\" : 6\n  }\n}, {\n  \"preco\" : 5.962133916683182377482808078639209270477294921875,\n  \"data\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"isbn\" : 0.80082819046101150206595775671303272247314453125,\n  \"genero\" : {\n    \"genero\" : \"genero\",\n    \"id\" : 1\n  },\n  \"titulo\" : \"titulo\",\n  \"autor\" : {\n    \"nome\" : \"nome\",\n    \"id\" : 6\n  }\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Livro>>(exampleJson)
            : default(List<Livro>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Busca todos os livros de um autor
        /// </summary>
        /// <remarks>faz a busca no banco dos livros por autor</remarks>
        /// <param name="autorId">ID do autor</param>
        /// <response code="200">success</response>
        /// <response code="400">Id inválido</response>
        /// <response code="404">Não Encontrado</response>
        [HttpGet]
        [Route("/IKokiri/Livrariav/v1/livros/autor/{autorId}/livros")]
        [ValidateModelState]
        [SwaggerOperation("GetLivrosByAutor")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Livro>), description: "success")]
        public virtual IActionResult GetLivrosByAutor([FromRoute][Required]long? autorId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Livro>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            string exampleJson = null;
            exampleJson = "[ {\n  \"preco\" : 5.962133916683182377482808078639209270477294921875,\n  \"data\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"isbn\" : 0.80082819046101150206595775671303272247314453125,\n  \"genero\" : {\n    \"genero\" : \"genero\",\n    \"id\" : 1\n  },\n  \"titulo\" : \"titulo\",\n  \"autor\" : {\n    \"nome\" : \"nome\",\n    \"id\" : 6\n  }\n}, {\n  \"preco\" : 5.962133916683182377482808078639209270477294921875,\n  \"data\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"isbn\" : 0.80082819046101150206595775671303272247314453125,\n  \"genero\" : {\n    \"genero\" : \"genero\",\n    \"id\" : 1\n  },\n  \"titulo\" : \"titulo\",\n  \"autor\" : {\n    \"nome\" : \"nome\",\n    \"id\" : 6\n  }\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Livro>>(exampleJson)
            : default(List<Livro>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Busca todos os livros de um genero
        /// </summary>
        /// <remarks>faz a busca no banco dos livros por genero</remarks>
        /// <param name="generoId">ID do genero</param>
        /// <response code="200">success</response>
        /// <response code="400">Id inválido</response>
        /// <response code="404">Não Encontrado</response>
        [HttpGet]
        [Route("/IKokiri/Livrariav/v1/livros/genero/{generoId}/livros")]
        [ValidateModelState]
        [SwaggerOperation("GetLivrosByGenero")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Livro>), description: "success")]
        public virtual IActionResult GetLivrosByGenero([FromRoute][Required]long? generoId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Livro>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            string exampleJson = null;
            exampleJson = "[ {\n  \"preco\" : 5.962133916683182377482808078639209270477294921875,\n  \"data\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"isbn\" : 0.80082819046101150206595775671303272247314453125,\n  \"genero\" : {\n    \"genero\" : \"genero\",\n    \"id\" : 1\n  },\n  \"titulo\" : \"titulo\",\n  \"autor\" : {\n    \"nome\" : \"nome\",\n    \"id\" : 6\n  }\n}, {\n  \"preco\" : 5.962133916683182377482808078639209270477294921875,\n  \"data\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"isbn\" : 0.80082819046101150206595775671303272247314453125,\n  \"genero\" : {\n    \"genero\" : \"genero\",\n    \"id\" : 1\n  },\n  \"titulo\" : \"titulo\",\n  \"autor\" : {\n    \"nome\" : \"nome\",\n    \"id\" : 6\n  }\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Livro>>(exampleJson)
            : default(List<Livro>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Atualização de um livro
        /// </summary>
        /// <remarks>Efetua a alteração de um ou varios dados de um livro</remarks>
        /// <param name="isbn">identificador do livro que será alterado</param>
        /// <param name="body">dados do livro que serão alterados</param>
        /// <response code="400">Livro inválido</response>
        /// <response code="404">Livro não encontrado</response>
        [HttpPut]
        [Route("/IKokiri/Livrariav/v1/livros/{isbn}")]
        [ValidateModelState]
        [SwaggerOperation("UpdateLivro")]
        public virtual IActionResult UpdateLivro([FromRoute][Required]decimal? isbn, [FromBody]Livro body)
        { 
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);


            throw new NotImplementedException();
        }
    }
}
