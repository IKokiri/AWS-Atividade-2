/*
 * Livraria Virtual
 *
 * Manipulação de livros e suas dependências 
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class GeneroApiController : Controller
    { 
        /// <summary>
        /// Adiciona um novo genero
        /// </summary>
        
        /// <param name="body">dados do genero que será adicionado</param>
        /// <response code="405">Dados inválidos</response>
        [HttpPost]
        [Route("/IKokiri/Livrariav/v1/generos")]
        [ValidateModelState]
        [SwaggerOperation("AddGenero")]
        public virtual IActionResult AddGenero([FromBody]Genero body)
        { 
            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Remoção de um genero
        /// </summary>
        /// <remarks>Remove um genero</remarks>
        /// <param name="id">identificador do genero que será removido</param>
        /// <response code="400">Genero inválido</response>
        /// <response code="404">Genero não encontrado</response>
        [HttpDelete]
        [Route("/IKokiri/Livrariav/v1/generos/{id}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteGenero")]
        public virtual IActionResult DeleteGenero([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Busca genero por id
        /// </summary>
        /// <remarks>Retorna um unico genero</remarks>
        /// <param name="id">identificador do genero de retorno</param>
        /// <response code="200">seccess</response>
        /// <response code="400">ID inválido</response>
        /// <response code="404">Genero não encontrado</response>
        [HttpGet]
        [Route("/IKokiri/Livrariav/v1/generos/{id}")]
        [ValidateModelState]
        [SwaggerOperation("GetGeneroById")]
        [SwaggerResponse(statusCode: 200, type: typeof(Genero), description: "seccess")]
        public virtual IActionResult GetGeneroById([FromRoute][Required]long? id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Genero));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            string exampleJson = null;
            exampleJson = "{\n  \"genero\" : \"genero\",\n  \"id\" : 1\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Genero>(exampleJson)
            : default(Genero);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Busca generos do armazenamento
        /// </summary>
        
        /// <response code="200">success</response>
        /// <response code="400">não encontrado</response>
        [HttpGet]
        [Route("/IKokiri/Livrariav/v1/generos")]
        [ValidateModelState]
        [SwaggerOperation("GetGeneros")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Genero>), description: "success")]
        public virtual IActionResult GetGeneros()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Genero>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            string exampleJson = null;
            exampleJson = "[ {\n  \"genero\" : \"genero\",\n  \"id\" : 1\n}, {\n  \"genero\" : \"genero\",\n  \"id\" : 1\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Genero>>(exampleJson)
            : default(List<Genero>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Atualização de um genero
        /// </summary>
        /// <remarks>Efetua a alteração de um ou varios dados de um genero</remarks>
        /// <param name="id">identificador do genero que será alterado</param>
        /// <param name="body">dados do genero que serão alterados</param>
        /// <response code="400">Genero inválido</response>
        /// <response code="404">Genero não encontrado</response>
        [HttpPut]
        [Route("/IKokiri/Livrariav/v1/generos/{id}")]
        [ValidateModelState]
        [SwaggerOperation("UpdateGenero")]
        public virtual IActionResult UpdateGenero([FromRoute][Required]int? id, [FromBody]Genero body)
        { 
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);


            throw new NotImplementedException();
        }
    }
}
