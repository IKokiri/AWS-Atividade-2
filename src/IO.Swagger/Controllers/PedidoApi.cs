/*
 * Livraria Virtual
 *
 * Manipulação de livros e suas dependências 
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class PedidoApiController : Controller
    { 
        /// <summary>
        /// Adiciona um carrinho ao pedido
        /// </summary>
        
        /// <param name="carrinhoId">ID do do carrinho ao ser adicionado ao pedido</param>
        /// <param name="body">dados do carrinho que será adicionado ao pedido</param>
        /// <response code="405">Dados inválidos</response>
        [HttpPost]
        [Route("/IKokiri/Livrariav/v1/livros/{carrinhoId}/pedido")]
        [ValidateModelState]
        [SwaggerOperation("AddCarrinhoPedido")]
        public virtual IActionResult AddCarrinhoPedido([FromRoute][Required]long? carrinhoId, [FromBody]Carrinho body)
        { 
            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Remoção de um carrinho do pedido
        /// </summary>
        /// <remarks>Remove um carrinho de um pedido</remarks>
        /// <param name="carrinhoId">identificador do carrinho que será removido do pedido</param>
        /// <response code="400">carrinho inválido</response>
        /// <response code="404">carrinho não está no pedido encontrado</response>
        [HttpDelete]
        [Route("/IKokiri/Livrariav/v1/livros/{carrinhoId}/pedido")]
        [ValidateModelState]
        [SwaggerOperation("DeleteLivroCarrinhoPedido")]
        public virtual IActionResult DeleteLivroCarrinhoPedido([FromRoute][Required]int? carrinhoId)
        { 
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Busca o status de um pedido
        /// </summary>
        /// <remarks>faz a busca no banco do status de um pedido</remarks>
        /// <param name="pedidoId">ID do pedido</param>
        /// <response code="200">seccess</response>
        /// <response code="400">Id inválido</response>
        /// <response code="404">Não Encontrado</response>
        [HttpGet]
        [Route("/IKokiri/Livrariav/v1/livros/pedido/{pedidoId}/acompanhamento")]
        [ValidateModelState]
        [SwaggerOperation("GetStatusPedido")]
        [SwaggerResponse(statusCode: 200, type: typeof(Pedido), description: "seccess")]
        public virtual IActionResult GetStatusPedido([FromRoute][Required]long? pedidoId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Pedido));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            string exampleJson = null;
            exampleJson = "{\n  \"total\" : 6.02745618307040320615897144307382404804229736328125,\n  \"data\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"livro\" : [ {\n    \"preco\" : 5.962133916683182377482808078639209270477294921875,\n    \"data\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"isbn\" : 0.80082819046101150206595775671303272247314453125,\n    \"genero\" : {\n      \"genero\" : \"genero\",\n      \"id\" : 1\n    },\n    \"titulo\" : \"titulo\",\n    \"autor\" : {\n      \"nome\" : \"nome\",\n      \"id\" : 6\n    }\n  }, {\n    \"preco\" : 5.962133916683182377482808078639209270477294921875,\n    \"data\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"isbn\" : 0.80082819046101150206595775671303272247314453125,\n    \"genero\" : {\n      \"genero\" : \"genero\",\n      \"id\" : 1\n    },\n    \"titulo\" : \"titulo\",\n    \"autor\" : {\n      \"nome\" : \"nome\",\n      \"id\" : 6\n    }\n  } ],\n  \"id\" : 0.80082819046101150206595775671303272247314453125,\n  \"status\" : \"status\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Pedido>(exampleJson)
            : default(Pedido);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
